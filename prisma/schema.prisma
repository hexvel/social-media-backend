generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int     @id @unique @default(autoincrement())
    username  String  @unique
    email     String  @unique
    firstName String  @map("first_name")
    lastName  String  @map("last_name")
    avatar    String?
    bio       String?
    password  String

    interests UserInterest[]
    likes     Like[]
    posts     Post[]
    friends   User[]         @relation("User Friends")
    friendsOf User[]         @relation("User Friends")

    conversations Conversation[] @relation("ConversationParticipants")
    messages      Message[]      @relation("User Messages")

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Conversation Conversation[]

    @@map("users")
}

model Post {
    id        Int       @id @default(autoincrement())
    content   String    @db.Text
    authorId  Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    likes     Like[]
    tags      PostTag[]
    photos    Photo[]
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@index([authorId], map: "posts_authorId_fkey")
    @@map("posts")
}

model Tag {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    posts     PostTag[]
}

model PostTag {
    postId Int
    tagId  Int
    post   Post @relation(fields: [postId], references: [id])
    tag    Tag  @relation(fields: [tagId], references: [id])

    @@id([postId, tagId])
    @@index([tagId], map: "PostTag_tagId_fkey")
}

model UserInterest {
    userId   Int
    interest String
    user     User   @relation(fields: [userId], references: [id])

    @@id([userId, interest])
}

model Photo {
    id        Int      @id @default(autoincrement())
    url       String
    postId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([postId], map: "photos_postId_fkey")
    @@map("photos")
}

model Like {
    id        Int      @id @default(autoincrement())
    userId    Int
    postId    Int
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([postId], map: "Like_postId_fkey")
}

model Conversation {
    id           Int       @id @default(autoincrement())
    title        String    @db.Text
    creatorId    Int
    participants User[]    @relation("ConversationParticipants")
    messages     Message[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@map("conversations")
}

model Message {
    id             Int          @id @default(autoincrement())
    content        String       @db.Text
    senderId       Int
    conversationId Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    sender         User         @relation("User Messages", fields: [senderId], references: [id], onDelete: Cascade)
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([conversationId], map: "Message_conversationId_fkey")
    @@map("messages")
}
